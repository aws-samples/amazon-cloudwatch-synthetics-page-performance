var synthetics = require('Synthetics');
const AWS = require('aws-sdk')

const log = require('SyntheticsLogger');

// Create an S3 client
const cw = new AWS.CloudWatch({
    apiVersion: '2010-08-01'
});

const ssm = new AWS.SSM();

const pageLoadBlueprint = async function () {

    let URL = undefined;

    try {
        let data = await ssm.getParameter({
            Name: 'PageLoadTimeURL',
            WithDecryption: true
        }).promise();
        log.info('getParameter:',JSON.stringify(data))
        URL = data.Parameter.Value;
    } catch (e) {
        log.error(e);
        return;
    }

    let page = await synthetics.getPage();

    //You can customize the wait condition here. For instance,
    //using 'networkidle2' may be less restrictive.
    const tic = Date.now()
    const response = await page.goto(URL, { waitUntil: 'networkidle0', timeout: 30000 });
    log.info(`1. page load took: ${Date.now() - tic}ms`)
    if (!response) {
        throw "Failed to load page!";
    }
    const perf = await page.evaluate(_ => {
        return JSON.parse(JSON.stringify(window.performance.timing));
    })
    log.info(`2. page load took: ${perf.loadEventEnd - perf.navigationStart}ms`)

    var params = {
        MetricData: [
            {
                MetricName: 'PageLoadTime',
                Dimensions: [
                    {
                        Name: 'URL',
                        Value: URL
                    }
                ],
                Unit: 'None',
                Value: perf.loadEventEnd - perf.navigationStart
            }
        ],
        Namespace: 'PagePerformance'
    };

    try {
        let data = await cw.putMetricData(params).promise();
        log.info('putMetricData', JSON.stringify(data));
    } catch (e) {
        log.error('Error putting metric data', e);
    }
    //Wait for page to render.
    //Increase or decrease wait time based on endpoint being monitored.
    await page.waitFor(15000);
    await synthetics.takeScreenshot('loaded', 'loaded');
    let pageTitle = await page.title();
    log.info('Page title: ' + pageTitle);

    const pageMetrics = await page.metrics();
    log.info('pageMetrics timestamp:' + pageMetrics.Timestamp)
    log.info('pageMetrics task duration:' + pageMetrics.TaskDuration)
    //If the response status code is not a 2xx success code
    if (response.status() < 200 || response.status() > 299) {
        throw "Failed to load page!";
    }
};

exports.handler = async () => {
    return await pageLoadBlueprint();
};
